<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="400" height="300">
	<mx:Script>
		<![CDATA[
			import mx.collections.XMLListCollection;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.utils.ObjectUtil;
			import mx.core.Application;
			import mx.managers.PopUpManager;
			
			/**
			* Handle Tool info return
			*/
			public function getNavGroupResult( event:Object ):void{
				trace("got groups "+event.result.length);
				Application.application.dataObj.navGroups = new ArrayCollection();
				if(event.result.length){
					Application.application.dataObj.navGroups = event.result;
					// retrieve nav data for default group
					Application.application.dataObj.currentGroup = event.result.getItemAt(0).navgroupid;
					navRO.getAllNavigation({navgroupid:Number(event.result.getItemAt(0).navgroupid),fromflex:1,usePermissions:1,active:0});
				}
			}
			/**
			* Handle nav item return
			*/
			public function getNavItemResult( event:Object ):void{
				trace("got items "+event.result.length);
				Application.application.dataObj.navItems = new ArrayCollection();
				Application.application.dataObj.navXML = new XMLListCollection();
				if(event.result.length){
					Application.application.dataObj.navItems = event.result;
					// convert to XML
					Application.application.dataObj.navXML =  new XMLListCollection(Application.application.dataObj.buildXMLNodes("root").node as XMLList);
					Application.application.dataObj.fieldSave = "";
					var selectItem:Object = new Object();
					// add default item
					selectItem.navitemname = "<-- Select -->";
					selectItem.navitemid = 0;
					Application.application.dataObj.navItems.addItemAt(selectItem,0);
				}else{
					Application.application.dataObj.navItems = new ArrayCollection();
				}
				Application.application.navForm.clearForm();
				Application.application.navForm.styleName = "ItemNotSelected";
			}
			/**
			* Handle page info return
			*/
			public function getPageResult( event:Object ):void{
				trace("got pages "+event.result.length);
				if(event.result.length){
					Application.application.dataObj.pages = event.result;
					// build section/file name for display
					for(var i:Number=0 ; i<Application.application.dataObj.pages.length ; i++){
						Application.application.dataObj.pages.getItemAt(i).fullpagename = "/"+Application.application.dataObj.pages.getItemAt(i).sitesectionname+"/"+Application.application.dataObj.pages.getItemAt(i).pagename;
					}
					var selectItem:Object = new Object();
					// add default item
					selectItem.fullpagename = "<-- Select -->";
					selectItem.pageid = 0;
					Application.application.dataObj.pages.addItemAt(selectItem,0);
					Application.application.navForm.pageAssign.selectedIndex = 0;
				}
				//trace(ObjectUtil.toString(event.result[10]));
			}
			/**
			* Handle page info return
			*/
			public function getAddressResult( event:Object ):void{
				trace("got addresses "+event.result.length);
				if(event.result.length){
					Application.application.dataObj.addresses = event.result;
				}
			}
			/**
			* Handle Tool info return
			*/
			public function groupUpdateResult( event:Object ):void{
				if(Application.application.dataObj.imagePopUp != null){
					PopUpManager.removePopUp(Application.application.dataObj.imagePopUp);
					Application.application.dataObj.imagePopUp = null
				}
				Application.application.msgTxt.htmlText = event.result;
				Application.application.dbManager.navRO.getNavGroups();
			}
			/**
			* Handle Tool info return
			*/
			public function getToolInfoResult( event:Object ):void{
				
			}
			
			/**
			* Handle ornidal update return
			*/
			public function oderUpdateResult( event:Object ):void{
				Application.application.msgTxt.htmlText = event.result;
			}
			
			/**
			* handle/assign return data for files
			*/
			public function getFilesResult(event:Object):void{
				Application.application.dataObj.uploadFiles=event.result;
			}
			
			/**
			* handle/assign return data for nav item update/add/delete
			*/
			public function itemUpdateResult(event:Object):void{
				Application.application.msgTxt.htmlText = event.result;
				navRO.getAllNavigation({navgroupid:Number(Application.application.dataObj.currentGroup),fromflex:1,usePermissions:1});
			}
			
			/**
			* handle/assign categories for attributes
			*/
			public function getCategoriesResult(event:Object):void{
				trace("got upload cats "+event.result.length);
				Application.application.dataObj.uploadFolders=event.result;
				Application.application.dataObj.uploadNodes=Application.application.dataObj.buildUploadXMLNodes(0);
				uploadRO.getUploadFilesByCategory({uploadcategoryid:event.result.getItemAt(0).uploadcategoryid});
			}
			
			/**
			* alert db error
			*/
			public function dbGroupFault( event:Object ):void{
				var thisAlert:Alert = Alert.show("Group Database Fault "+ObjectUtil.toString(event.fault));
				thisAlert.percentWidth = 70;
			}
			/**
			* alert db error
			*/
			public function dbGetItemFault( event:Object ):void{
				var thisAlert:Alert = Alert.show("Item Database Fault "+ObjectUtil.toString(event.fault));
				thisAlert.percentWidth = 70;
			}
			/**
			* alert db error
			*/
			public function dbPageFault( event:Object ):void{
				var thisAlert:Alert = Alert.show("Page Tool Database Fault "+ObjectUtil.toString(event.fault));
				thisAlert.percentWidth = 70;
			}
			/**
			* alert db error
			*/
			public function dbAddressFault( event:Object ):void{
				var thisAlert:Alert = Alert.show("Address Tool Database Fault "+ObjectUtil.toString(event.fault));
				thisAlert.percentWidth = 70;
			}
			/**
			* alert db error
			*/
			public function dbItemFault( event:Object ):void{
				var thisAlert:Alert = Alert.show("Item Database Fault "+ObjectUtil.toString(event.fault));
				thisAlert.percentWidth = 70;
			}
			/**
			* alert db error
			*/
			public function dbToolFault( event:Object ):void{
				var thisAlert:Alert = Alert.show("Tool Database Fault "+ObjectUtil.toString(event.fault));
				thisAlert.percentWidth = 70;
			}
			/**
			* Respond to database fault by alerting user
			*/
			public function uploadFault( event:Object ):void{
				Alert.show("Upload Fault "+ObjectUtil.toString(event.fault));
			}
		]]>
	</mx:Script>
	<mx:RemoteObject id="navRO" destination="ColdFusion" source="admintools.components.navigation" showBusyCursor="true">
		<mx:method makeObjectsBindable="true" name="getNavGroups" result="{getNavGroupResult(event)}" fault="{dbGroupFault(event)}" />
		<mx:method makeObjectsBindable="true" name="addNavGroup" result="{groupUpdateResult(event)}" fault="{dbGroupFault(event)}" />
		<mx:method makeObjectsBindable="true" name="updateNavGroup" result="{groupUpdateResult(event)}" fault="{dbGroupFault(event)}" />
		<mx:method makeObjectsBindable="true" name="delNavGroup" result="{groupUpdateResult(event)}" fault="{dbGroupFault(event)}" />
		<mx:method makeObjectsBindable="true" name="getAllNavigation" result="{getNavItemResult(event)}" fault="{dbGetItemFault(event)}" />
		<mx:method makeObjectsBindable="true" name="addMenuItem" result="{itemUpdateResult(event)}" fault="{dbItemFault(event)}" />
		<mx:method makeObjectsBindable="true" name="updateMenuItem" result="{itemUpdateResult(event)}" fault="{dbItemFault(event)}" />
		<mx:method makeObjectsBindable="true" name="delMenuItem" result="{itemUpdateResult(event)}" fault="{dbItemFault(event)}" />
		<mx:method makeObjectsBindable="true" name="updateMenuOrder" result="{oderUpdateResult(event)}" fault="{dbToolFault(event)}" />
		<mx:method makeObjectsBindable="true" name="getPages" result="{getPageResult(event)}" fault="{dbPageFault(event)}" />
		<mx:method makeObjectsBindable="true" name="getnavAddresses" result="{getAddressResult(event)}" fault="{dbAddressFault(event)}" />
	</mx:RemoteObject>
	<mx:RemoteObject id="uploadRO" destination="ColdFusion" source="admintools.components.upload" showBusyCursor="true">
		<mx:method makeObjectsBindable="true" name="getUploadCategories" result="{getCategoriesResult(event)}" fault="{uploadFault(event)}" />
		<mx:method makeObjectsBindable="true" name="getUploadFilesByCategory" result="{getFilesResult(event)}" fault="{uploadFault(event)}" />
	</mx:RemoteObject>
</mx:Canvas>
