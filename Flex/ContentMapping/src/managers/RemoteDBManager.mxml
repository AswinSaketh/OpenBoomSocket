<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml">
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.utils.ObjectUtil;
			import mx.core.Application;
			import mx.managers.PopUpManager;
			
			/**
			* Handle Tool info return
			*/
			public function getToolInfoResult( event:Object ):void{
				if(event.result.length){
					switch(Application.application.dataObj.instanceCase){
						case "master":
							Application.application.dataObj.masterToolData = event.result;
							Application.application.dataObj.toolName = event.result.getItemAt(0).label;
							Application.application.assignmentForm.label = String(Application.application.dataObj.toolName+' Assignments');
							Application.application.dataObj.idFieldMaster = event.result.getItemAt(0).datatable+"id";
							Application.application.dataObj.nameFieldMaster = event.result.getItemAt(0).datatable+"name";
						break;
						case "associate":
							Application.application.dataObj.associateToolData = event.result;
							Application.application.dataObj.idFieldAssociate = event.result.getItemAt(0).datatable+"id";
							Application.application.dataObj.nameFieldAssociate = event.result.getItemAt(0).datatable+"name";
							if((Application.application.currentState == null) || (Application.application.currentState == "admin")){
								Application.application.dbObj.mappingRO.getAllInstances({formobjectid:Application.application.ruleListing.selectedItem.formobjectid});
							}else{
								Application.application.dbObj.mappingRO.getAllInstances({formobjectid:Application.application.ruleListingCB.selectedItem.formobjectid});
							}
						break;
						default:
						break;
					}
				}else{
					switch(Application.application.dataObj.instanceCase){
						case "master":
							Application.application.dataObj.toolName = "";
							Application.application.dataObj.idFieldMaster = "";
							Application.application.dataObj.nameFieldMaster = "";
						break;
						case "associate":
							Application.application.dataObj.idFieldAssociate = "";
							Application.application.dataObj.nameFieldAssociate = "";
						break;
						default:
						break;
					}
				}
			}
			/**
			* Handle 'Rule' Form object list return
			*/
			public function getFormObjectsResult( event:Object ):void{
				if(event.result.length){
					Application.application.dataObj.ruleSet = event.result;
					if((Application.application.currentState != null) && (Application.application.currentState != "admin")){
						var defaultObj:Object = new Object();
						defaultObj.formobjectid = 0;
						if(defaultObj.instanceRole == "associate"){
							defaultObj.formobjectname = "Select a Page Type to Assign to";
						}else{
							defaultObj.formobjectname = "Select a Page Type to Assign from";
						}
						Application.application.dataObj.ruleSet.addItemAt(defaultObj,0);
						Application.application.ruleListingCB.selectedIndex = 0;
					}
				}else{
					Application.application.dataObj.ruleSet = new ArrayCollection();
				}
			}
			/**
			* Handle tool instances return
			*/
			public function getAllInstancesResult( event:Object ):void{
				if(event.result.length){
					switch(Application.application.dataObj.instanceCase){
						case "master":
							Application.application.dataObj.mainListData = event.result;
							// grab specific instance passed in
							if(Application.application.dataObj.instanceMasterID>0){
								for(var m:Number=0 ; m<event.result.length ; m++){
									if(Number(event.result.getItemAt(m)[Application.application.dataObj.idFieldMaster]) == Number(Application.application.dataObj.instanceMasterID)){
										Application.application.dataObj.instanceMaster = event.result.getItemAt(m);
									}
								}
								if((Application.application.dataObj.instanceMaster.name != null) && Application.application.dataObj.instanceMasterName.length){
									Application.application.dataObj.instanceMaster = new Object();
									Application.application.dataObj.instanceMaster[Application.application.dataObj.idFieldMaster]=Application.application.dataObj.instanceMasterID;
									Application.application.dataObj.instanceMaster[Application.application.dataObj.nameFieldMaster]=Application.application.dataObj.instanceMasterName;
								}
							}
							if((Application.application.currentState == null)||(Application.application.currentState == "admin")){
								Application.application.dataObj.buildDBArrayCollection(Application.application.dataObj.masterToolData);
							}
						break;
						case "associate":
							Application.application.dataObj.availableDataList = new ArrayCollection();
							for(var i:Number=0 ; i<Application.application.dataObj.mappedDataList.length ; i++){
								for(var j:Number=0 ; j<event.result.length ; j++){
									if(Number(event.result.getItemAt(j)[Application.application.dataObj.idFieldAssociate]) == Number(Application.application.dataObj.mappedDataList[i])){
										event.result.getItemAt(j).isMapped = true;
										Application.application.dataObj.availableDataList.addItem(event.result.getItemAt(j));
									}
								}
							}
							for(var k:Number=0 ; k<event.result.length ; k++){
								if((Application.application.dataObj.mappedDataList.length>0) && (Application.application.dataObj.mappedDataList.indexOf(String(event.result.getItemAt(k)[Application.application.dataObj.idFieldAssociate])) != -1)){
								}else{
									event.result.getItemAt(k).isMapped = false;
									Application.application.dataObj.availableDataList.addItem(event.result.getItemAt(k));
								}
							}
							if(Application.application.selectionCB != null){
								Application.application.selectionCB.selected = false;
								if((Application.application.currentState == null) || (Application.application.currentState == "admin")){
									Application.application.selectionCB.label="Check All ";
									if(Application.application.ruleListing.selectedIndex>=0){
										Application.application.selectionCB.label+=" "+Application.application.ruleListing.selectedItem.formobjectname+"s";
									}
								}else{
									Application.application.selectionCB.label="Check All ";
									if(Application.application.ruleListingCB.selectedIndex>0){
										Application.application.selectionCB.label+=" "+Application.application.ruleListingCB.selectedItem.formobjectname+"s";
									}
								}
							}
							Application.application.dataObj.buildDBArrayCollection(Application.application.dataObj.associateToolData);
						break;
						default:
						break;
					}
				}else{
					switch(Application.application.dataObj.instanceCase){
						case "master":
							Application.application.dataObj.mainListData = new ArrayCollection();
						break;
						case "associate":
							Application.application.dataObj.availableDataList = new ArrayCollection();
						break;
						default:
						break;
					}
				}

			}
			/**
			* Handle mapped instances return
			*/
			public function getMappedResult( event:Object ):void{
				if(event.result.length){
					Application.application.dataObj.mappedDataList = String(event.result).split(',');
				}else{
					Application.application.dataObj.mappedDataList = new Array();
				}
				if((Application.application.currentState == null)||(Application.application.currentState == "admin")){
					formRO.getToolInfo({toolid:Application.application.ruleListing.selectedItem.formobjectid,dataSource:Application.application.dataObj.sitemapping});
				}else{
					formRO.getToolInfo({toolid:Application.application.ruleListingCB.selectedItem.formobjectid,dataSource:Application.application.dataObj.sitemapping});
				}
			}
			/**
			* Handle mapped instances return
			*/
			public function getMapInsertResult( event:Object ):void{
				var myTimer:Timer = new Timer(300, 1);
				myTimer.addEventListener("timer", closePopup);
				myTimer.start();
			}
			/**
			* close woobie
			*/
			public function closePopup( event:Object ):void{
				if(Application.application.imagePopUp != null){
					PopUpManager.removePopUp(Application.application.imagePopUp);
					Application.application.imagePopUp = null;
				}
			}
			
			/**
			* alert db error
			*/
			public function dbFOFault( event:Object ):void{
				var thisAlert:Alert = Alert.show("Form Object 'Rule' Database Fault "+ObjectUtil.toString(event.fault));
				thisAlert.percentWidth = 70;
			}
			/**
			* alert db error
			*/
			public function dbInstFault( event:Object ):void{
				var thisAlert:Alert = Alert.show("Instance Database Fault "+ObjectUtil.toString(event.fault));
				thisAlert.percentWidth = 70;
			}
			/**
			* alert db error
			*/
			public function dbMapFault( event:Object ):void{
				var thisAlert:Alert = Alert.show("Mapping Database Fault "+ObjectUtil.toString(event.fault));
				thisAlert.percentWidth = 70;
			}
			/**
			* alert db error
			*/
			public function dbMapInsertFault( event:Object ):void{
				var thisAlert:Alert = Alert.show("Mapping Insert Database Fault "+ObjectUtil.toString(event.fault));
				thisAlert.percentWidth = 70;
			}
			/**
			* alert db error
			*/
			public function dbToolFault( event:Object ):void{
				var thisAlert:Alert = Alert.show("Tool Database Fault "+ObjectUtil.toString(event.fault));
				thisAlert.percentWidth = 70;
			}
		]]>
	</mx:Script>
	<!-- Remote Objects for Data interaction -->
	<mx:RemoteObject id="mappingRO" destination="ColdFusion" source="admintools.components.contentmapping" showBusyCursor="true">
		<mx:method makeObjectsBindable="true" name="getFormObjects" result="{getFormObjectsResult(event)}" fault="{dbFOFault(event)}" />
		<mx:method makeObjectsBindable="true" name="getAllInstances" result="{getAllInstancesResult(event)}" fault="{dbInstFault(event)}" />
		<mx:method makeObjectsBindable="true" name="getMappedInstanceIDs" result="{getMappedResult(event)}" fault="{dbMapFault(event)}" />
		<mx:method makeObjectsBindable="true" name="insertUpdateMappings" result="{getMapInsertResult(event)}" fault="{dbMapInsertFault(event)}" />
		<mx:method makeObjectsBindable="true" name="deleteMappings" result="{getMapInsertResult(event)}" fault="{dbMapInsertFault(event)}" />
	</mx:RemoteObject>
	<mx:RemoteObject id="formRO" destination="ColdFusion" source="admintools.components.formInstance" showBusyCursor="true">
		<mx:method makeObjectsBindable="true" name="getToolInfo" result="{getToolInfoResult(event)}" fault="{dbToolFault(event)}" />
	</mx:RemoteObject>
</mx:Canvas>
